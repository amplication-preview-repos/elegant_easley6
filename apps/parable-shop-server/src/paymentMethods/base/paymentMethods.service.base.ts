/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PaymentMethods as PrismaPaymentMethods } from "@prisma/client";

export class PaymentMethodsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentMethodsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentMethods.count(args);
  }

  async paymentMethodsItems(
    args: Prisma.PaymentMethodsFindManyArgs
  ): Promise<PrismaPaymentMethods[]> {
    return this.prisma.paymentMethods.findMany(args);
  }
  async paymentMethods(
    args: Prisma.PaymentMethodsFindUniqueArgs
  ): Promise<PrismaPaymentMethods | null> {
    return this.prisma.paymentMethods.findUnique(args);
  }
  async createPaymentMethods(
    args: Prisma.PaymentMethodsCreateArgs
  ): Promise<PrismaPaymentMethods> {
    return this.prisma.paymentMethods.create(args);
  }
  async updatePaymentMethods(
    args: Prisma.PaymentMethodsUpdateArgs
  ): Promise<PrismaPaymentMethods> {
    return this.prisma.paymentMethods.update(args);
  }
  async deletePaymentMethods(
    args: Prisma.PaymentMethodsDeleteArgs
  ): Promise<PrismaPaymentMethods> {
    return this.prisma.paymentMethods.delete(args);
  }
}
