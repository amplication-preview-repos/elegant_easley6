/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentMethodsService } from "../paymentMethods.service";
import { PaymentMethodsCreateInput } from "./PaymentMethodsCreateInput";
import { PaymentMethods } from "./PaymentMethods";
import { PaymentMethodsFindManyArgs } from "./PaymentMethodsFindManyArgs";
import { PaymentMethodsWhereUniqueInput } from "./PaymentMethodsWhereUniqueInput";
import { PaymentMethodsUpdateInput } from "./PaymentMethodsUpdateInput";

export class PaymentMethodsControllerBase {
  constructor(protected readonly service: PaymentMethodsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentMethods })
  async createPaymentMethods(
    @common.Body() data: PaymentMethodsCreateInput
  ): Promise<PaymentMethods> {
    return await this.service.createPaymentMethods({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentMethods] })
  @ApiNestedQuery(PaymentMethodsFindManyArgs)
  async paymentMethodsItems(
    @common.Req() request: Request
  ): Promise<PaymentMethods[]> {
    const args = plainToClass(PaymentMethodsFindManyArgs, request.query);
    return this.service.paymentMethodsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentMethods })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentMethods(
    @common.Param() params: PaymentMethodsWhereUniqueInput
  ): Promise<PaymentMethods | null> {
    const result = await this.service.paymentMethods({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentMethods })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentMethods(
    @common.Param() params: PaymentMethodsWhereUniqueInput,
    @common.Body() data: PaymentMethodsUpdateInput
  ): Promise<PaymentMethods | null> {
    try {
      return await this.service.updatePaymentMethods({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentMethods })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentMethods(
    @common.Param() params: PaymentMethodsWhereUniqueInput
  ): Promise<PaymentMethods | null> {
    try {
      return await this.service.deletePaymentMethods({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
